-- Roles table
CREATE TABLE roles (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username TEXT NOT NULL UNIQUE,
  display_name TEXT,
  email TEXT NOT NULL UNIQUE,
  status TEXT NOT NULL DEFAULT 'active',  -- e.g. 'active', 'pending', 'banned'
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- User-to-Role join table (many-to-many)
CREATE TABLE user_roles (
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, role_id)
);

-- How-to posts table
CREATE TABLE howtos (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  image_url TEXT,      -- cover image or thumbnail
  author_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
  view_count INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Steps for How-tos (order in a howto)
CREATE TABLE howto_steps (
  id SERIAL PRIMARY KEY,
  howto_id INTEGER NOT NULL REFERENCES howtos(id) ON DELETE CASCADE,
  step_number INTEGER NOT NULL,  -- 1, 2, 3, ...
  description TEXT NOT NULL,
  image_url TEXT,
  CONSTRAINT unique_step UNIQUE (howto_id, step_number)
);

-- Research posts table
CREATE TABLE researches (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  image_url TEXT,
  author_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
  view_count INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Updates for Research posts
CREATE TABLE research_updates (
  id SERIAL PRIMARY KEY,
  research_id INTEGER NOT NULL REFERENCES researches(id) ON DELETE CASCADE,
  update_number INTEGER NOT NULL,  -- 1, 2, 3, ...
  title TEXT,                      -- optional subtitle for update
  content TEXT NOT NULL,
  image_url TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT unique_update UNIQUE (research_id, update_number)
);

-- Events table
CREATE TABLE events (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  location TEXT,          -- free-text location or address
  latitude DECIMAL(9,6),  -- optional geolocation
  longitude DECIMAL(9,6), -- optional geolocation
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  host_id INTEGER REFERENCES users(id) ON DELETE SET NULL,  -- event creator
  image_url TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Comments table (polymorphic-like)
CREATE TABLE comments (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  body TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  howto_id INTEGER REFERENCES howtos(id) ON DELETE CASCADE,
  research_id INTEGER REFERENCES researches(id) ON DELETE CASCADE,
  event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
  research_update_id INTEGER REFERENCES research_updates(id) ON DELETE CASCADE
);

-- Tags table
CREATE TABLE tags (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Join tables for tagging
CREATE TABLE howto_tags (
  howto_id INTEGER NOT NULL REFERENCES howtos(id) ON DELETE CASCADE,
  tag_id INTEGER NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  PRIMARY KEY (howto_id, tag_id)
);

CREATE TABLE research_tags (
  research_id INTEGER NOT NULL REFERENCES researches(id) ON DELETE CASCADE,
  tag_id INTEGER NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  PRIMARY KEY (research_id, tag_id)
);

CREATE TABLE event_tags (
  event_id INTEGER NOT NULL REFERENCES events(id) ON DELETE CASCADE,
  tag_id INTEGER NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  PRIMARY KEY (event_id, tag_id)
);
